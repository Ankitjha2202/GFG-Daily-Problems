//{ Driver Code Starts
#include<bits/stdc++.h>
using namespace std;

// } Driver Code Ends
class Solution {
public:
    long long int MissingNo(vector<vector<int> >& matrix) {
         int r,c;
         int n=matrix.size();
         for(int i=0;i<n;i++){
             for(int j=0;j<n;j++){
                 if(matrix[i][j]==0){
                     r=i;
                     c=j;
                     break;
                 }
             }
         }
         int ind=r+1<n?r+1:r-1;
         long long int rows=0;
         long long int zerors=0;
         for(int i=0;i<n;i++){
             zerors+=matrix[r][i];
             rows+=matrix[ind][i];
         }
         long long int missno=rows-zerors;
         if(missno<=0){
             return -1;
         }
         matrix[r][c]=missno;
         if(check(matrix,n,rows)){
             return missno;
         }
         return -1;
    }
    private:
    bool check(vector<vector<int> >& matrix, int n,int sum){
        for(int i=0;i<n;i++){
            int rows = 0;
            int cols = 0;
            for(int j=0;j<n;j++){
                rows += matrix[i][j];
                cols += matrix[j][i];
            }
            if(rows != sum || cols != sum)return false;
        }
        //check both diagonals
        int r1=0,c1=0;
        int r2=0,c2=n-1;
        int dia2 = 0;
        int dia1 = 0;
        while(r1<n){
            dia1 += matrix[r1++][c1++];
            dia2 += matrix[r2++][c2--];
        }
        if(dia1 != sum || dia2 != sum)return false;
        return true;
    }
};

//{ Driver Code Starts.
int main(){
	int tc;
	cin >> tc;
	while(tc--){
		int n;
		cin >> n;
		vector<vector<int>> matrix(n, vector<int>(n,0));
		for(int i = 0; i < n; i++){
			for(int j = 0; j < n; j++){
				cin >> matrix[i][j];
			}
		}
		Solution ob;
		long long int ans = ob.MissingNo(matrix);
		cout << ans <<"\n";
	}
	return 0;
}
// } Driver Code Ends
